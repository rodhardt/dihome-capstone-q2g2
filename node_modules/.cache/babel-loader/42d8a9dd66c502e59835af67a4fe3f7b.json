{"ast":null,"code":"var _jsxFileName = \"/home/rodhardt/Documents/Q2/new-dihome/dihome-capstone-q2g2/src/components/PayCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useAuth } from \"../../providers/Authentication\";\nimport ConfirmedModal from \"../ConfirmedModal\";\nimport { RowBox, PayCardStyled } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PayCard = ({\n  img,\n  planName,\n  anouncesQuantity,\n  price\n}) => {\n  _s();\n\n  const history = useHistory();\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [isOpenSecondModal, setIsOpenSecondModal] = useState(false);\n  const {\n    updateUser,\n    userInfo\n  } = useAuth();\n  const newUserInfo = {\n    id: userInfo.id,\n    password: userInfo.password,\n    name: userInfo.name,\n    email: userInfo.email,\n    telephone: userInfo.telephone,\n    consultant: userInfo.consultant,\n    announcedProperties: userInfo.announcedProperties,\n    bookmarkedProperties: userInfo.bookmarkedProperties,\n    subscriptionType: planName\n  };\n  const modalInformation = {\n    title: \"Assinar plano\",\n    closeFunction: () => setIsOpenModal(false),\n    message: `Você deseja assinar esse plano por R$ ${price}0?`,\n    confirmButton: {\n      confirmText: \"confirmar\",\n      confirmFunction: () => {\n        updateUser(newUserInfo);\n        console.log(newUserInfo);\n        setIsOpenSecondModal(true);\n      }\n    },\n    cancelButton: {\n      cancelText: \"cancelar\",\n      cancelFunction: () => {}\n    }\n  };\n  const secondModalInformation = {\n    title: \"Parabéns\",\n    closeFunction: () => setIsOpenModal(false),\n    message: `O plano ${planName} foi assinado com sucesso!`,\n    confirmButton: {\n      confirmText: \"voltar\",\n      confirmFunction: () => {\n        history.push(\"/perfil\");\n        setIsOpenSecondModal(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PayCardStyled, {\n    children: [isOpenModal && /*#__PURE__*/_jsxDEV(ConfirmedModal, {\n      modalContent: modalInformation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this), isOpenSecondModal && /*#__PURE__*/_jsxDEV(ConfirmedModal, {\n      modalContent: secondModalInformation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(RowBox, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: planName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: anouncesQuantity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"R$ \", price, \" / m\\xEAs\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsOpenModal(true);\n      },\n      children: \"assinar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PayCard, \"90W7FjVOg91OTQqa7NLXQ9rcfko=\", false, function () {\n  return [useHistory, useAuth];\n});\n\n_c = PayCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PayCard\");","map":{"version":3,"sources":["/home/rodhardt/Documents/Q2/new-dihome/dihome-capstone-q2g2/src/components/PayCard/index.tsx"],"names":["useState","useHistory","useAuth","ConfirmedModal","RowBox","PayCardStyled","PayCard","img","planName","anouncesQuantity","price","history","isOpenModal","setIsOpenModal","isOpenSecondModal","setIsOpenSecondModal","updateUser","userInfo","newUserInfo","id","password","name","email","telephone","consultant","announcedProperties","bookmarkedProperties","subscriptionType","modalInformation","title","closeFunction","message","confirmButton","confirmText","confirmFunction","console","log","cancelButton","cancelText","cancelFunction","secondModalInformation","push"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useAuth } from \"../../providers/Authentication\";\nimport ConfirmedModal from \"../ConfirmedModal\";\nimport { RowBox, PayCardStyled } from \"./styles\";\n\ninterface PayCardProps {\n  img: any;\n  planName: string;\n  anouncesQuantity: string;\n  price: number;\n}\n\nexport const PayCard = ({\n  img,\n  planName,\n  anouncesQuantity,\n  price,\n}: PayCardProps) => {\n  const history = useHistory();\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [isOpenSecondModal, setIsOpenSecondModal] = useState(false);\n\n  const { updateUser, userInfo } = useAuth();\n\n  const newUserInfo = {\n    id: userInfo.id,\n    password: userInfo.password,\n    name: userInfo.name,\n    email: userInfo.email,\n    telephone: userInfo.telephone,\n    consultant: userInfo.consultant,\n    announcedProperties: userInfo.announcedProperties,\n    bookmarkedProperties: userInfo.bookmarkedProperties,\n    subscriptionType: planName,\n  };\n\n  const modalInformation = {\n    title: \"Assinar plano\",\n    closeFunction: () => setIsOpenModal(false),\n    message: `Você deseja assinar esse plano por R$ ${price}0?`,\n    confirmButton: {\n      confirmText: \"confirmar\",\n      confirmFunction: () => {\n        updateUser(newUserInfo);\n        console.log(newUserInfo);\n        setIsOpenSecondModal(true);\n      },\n    },\n    cancelButton: {\n      cancelText: \"cancelar\",\n      cancelFunction: () => {},\n    },\n  };\n\n  const secondModalInformation = {\n    title: \"Parabéns\",\n    closeFunction: () => setIsOpenModal(false),\n    message: `O plano ${planName} foi assinado com sucesso!`,\n    confirmButton: {\n      confirmText: \"voltar\",\n      confirmFunction: () => {\n        history.push(\"/perfil\");\n        setIsOpenSecondModal(false);\n      },\n    },\n  };\n\n  return (\n    <PayCardStyled>\n      {isOpenModal && <ConfirmedModal modalContent={modalInformation} />}\n      {isOpenSecondModal && (\n        <ConfirmedModal modalContent={secondModalInformation} />\n      )}\n      <RowBox>\n        <img src={img} alt=\"\" />\n        <ul>\n          <li>{planName}</li>\n          <li>{anouncesQuantity}</li>\n          <li>R$ {price} / mês</li>\n        </ul>\n      </RowBox>\n      <button\n        onClick={() => {\n          setIsOpenModal(true);\n        }}\n      >\n        assinar\n      </button>\n    </PayCardStyled>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}