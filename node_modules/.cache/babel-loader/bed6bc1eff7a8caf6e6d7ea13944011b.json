{"ast":null,"code":"var _jsxFileName = \"/home/rodhardt/Documents/Q2/new-dihome/dihome-capstone-q2g2/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropertyCard from \"../../components/PropertyCard\";\nimport { useProperties } from \"../../providers/Properties\";\nimport { DashboardStyled } from \"./styles\";\nimport FilterModal from \"../../components/Dashboard/FilterModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const [filterType, setFilTertype] = useState(\"\");\n  const [filterBathroom, setFilterBathroom] = useState(0);\n  const [filterDorms, setFilterDorms] = useState(0);\n  const [filterPrice, setFilterPrice] = useState(0);\n  const [list, setList] = useState([]);\n  const [searchInit, setSearchInit] = useState(false);\n  const {\n    properties\n  } = useProperties();\n  const [filteredProperties, setFilteredProperties] = useState(properties);\n  useEffect(() => {\n    setFilteredProperties(properties);\n  }, [properties]);\n  const [isChoosingFilters, setIsChoosingFilters] = useState(false);\n  const [activeFilters, setActiveFilters] = useState({\n    price: 0,\n    type: [],\n    goal: [],\n    state: \"\",\n    city: \"\",\n    district: \"\",\n    dorms: [],\n    parking: [],\n    bathrooms: [],\n    houseArea: [],\n    landArea: []\n  });\n  const filterTypes = {\n    price: \"max\",\n    type: \"includes\",\n    goal: \"includes\",\n    state: \"equal\",\n    city: \"includes-string\",\n    district: \"includes-string\",\n    dorms: \"includes\",\n    parking: \"includes\",\n    bathrooms: \"includes\",\n    houseArea: \"range\",\n    landArea: \"range\"\n  };\n\n  const handleFilteredProperties = () => {\n    const activeKeys = Object.keys(activeFilters);\n    const activeValues = Object.values(activeFilters);\n    const typeValues = Object.values(filterTypes);\n    const newPropertiesList = properties.filter(property => {\n      return activeKeys.every((filterName, index) => {\n        const propertyKeys = Object.keys(property);\n        const propertyValues = Object.values(property);\n\n        if (typeof activeValues[index] === \"number\" && activeValues[index] === 0 || activeValues[index].length === 0) {\n          return true;\n        }\n\n        if (typeValues[index] === \"max\" && propertyValues[propertyKeys.indexOf(filterName)] > activeValues[index]) {\n          return false;\n        }\n\n        if (typeValues[index] === \"includes-string\" && !propertyValues[propertyKeys.indexOf(filterName)].includes(activeValues[index])) {\n          return false;\n        }\n\n        if (typeValues[index] === \"includes\" && !activeValues[index].includes(propertyValues[propertyKeys.indexOf(filterName)]) && !(activeValues[index].includes(5) && propertyValues[propertyKeys.indexOf(filterName)] >= 5)) {\n          return false;\n        }\n\n        if (typeValues[index] === \"equal\" && activeValues[index] !== propertyValues[propertyKeys.indexOf(filterName)]) {\n          return false;\n        }\n\n        if (typeValues[index] === \"range\" && (propertyValues[propertyKeys.indexOf(filterName)] < activeValues[index][0] || propertyValues[propertyKeys.indexOf(filterName)] > activeValues[index][1]) && activeValues[index][1] !== 0) {\n          return false;\n        }\n\n        return true;\n      });\n    });\n    setFilteredProperties(newPropertiesList);\n  };\n\n  const handleFilter = filterSearchData => {\n    setActiveFilters(filterSearchData);\n  };\n\n  const closeWindow = () => {\n    setIsChoosingFilters(false);\n    handleFilteredProperties();\n  };\n\n  useEffect(() => {\n    handleFilteredProperties();\n  }, [activeFilters]);\n  const [renderAtt, setRenderAtt] = useState(1);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isChoosingFilters && /*#__PURE__*/_jsxDEV(FilterModal, {\n      handleFilter: handleFilter,\n      closeWindow: closeWindow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleFilteredProperties(),\n      children: \"Teste\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsChoosingFilters(true),\n      children: \"Abrir Filtros\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardStyled, {\n      children: renderAtt && properties && filteredProperties.map(item => /*#__PURE__*/_jsxDEV(PropertyCard, {\n        properties: item,\n        type: \"DashBoard\",\n        setRenderAtt: setRenderAtt,\n        renderAtt: renderAtt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Dashboard, \"ZpJ0outKYYxKP7UI10RBECB0F8Y=\", false, function () {\n  return [useProperties];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/rodhardt/Documents/Q2/new-dihome/dihome-capstone-q2g2/src/pages/Dashboard/index.tsx"],"names":["useState","useEffect","PropertyCard","useProperties","DashboardStyled","FilterModal","Dashboard","filterType","setFilTertype","filterBathroom","setFilterBathroom","filterDorms","setFilterDorms","filterPrice","setFilterPrice","list","setList","searchInit","setSearchInit","properties","filteredProperties","setFilteredProperties","isChoosingFilters","setIsChoosingFilters","activeFilters","setActiveFilters","price","type","goal","state","city","district","dorms","parking","bathrooms","houseArea","landArea","filterTypes","handleFilteredProperties","activeKeys","Object","keys","activeValues","values","typeValues","newPropertiesList","filter","property","every","filterName","index","propertyKeys","propertyValues","length","indexOf","includes","handleFilter","filterSearchData","closeWindow","renderAtt","setRenderAtt","map","item"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport PropertyCard from \"../../components/PropertyCard\";\nimport { useProperties } from \"../../providers/Properties\";\nimport { DashboardStyled } from \"./styles\";\n\nimport FilterModal from \"../../components/Dashboard/FilterModal\";\n\nimport { PropertyData } from \"../../assets/Types/property\";\n\ninterface FilterSearchData {\n  price: number;\n  type: string[];\n  goal: string[];\n  state: string;\n  city: string;\n  district: string;\n  dorms: number[];\n  parking: number[];\n  bathrooms: number[];\n  houseArea: number[];\n  landArea: number[];\n}\n\nfunction Dashboard() {\n  const [filterType, setFilTertype] = useState(\"\");\n\n  const [filterBathroom, setFilterBathroom] = useState(0);\n\n  const [filterDorms, setFilterDorms] = useState(0);\n\n  const [filterPrice, setFilterPrice] = useState(0);\n\n  const [list, setList] = useState<PropertyData[]>([]);\n\n  const [searchInit, setSearchInit] = useState(false);\n\n  const { properties } = useProperties();\n\n  const [filteredProperties, setFilteredProperties] =\n    useState<PropertyData[]>(properties);\n\n  useEffect(() => {\n    setFilteredProperties(properties);\n  }, [properties]);\n\n  const [isChoosingFilters, setIsChoosingFilters] = useState(false);\n\n  const [activeFilters, setActiveFilters] = useState<FilterSearchData>({\n    price: 0,\n    type: [],\n    goal: [],\n    state: \"\",\n    city: \"\",\n    district: \"\",\n    dorms: [],\n    parking: [],\n    bathrooms: [],\n    houseArea: [],\n    landArea: [],\n  });\n\n  const filterTypes = {\n    price: \"max\",\n    type: \"includes\",\n    goal: \"includes\",\n    state: \"equal\",\n    city: \"includes-string\",\n    district: \"includes-string\",\n    dorms: \"includes\",\n    parking: \"includes\",\n    bathrooms: \"includes\",\n    houseArea: \"range\",\n    landArea: \"range\",\n  };\n\n  const handleFilteredProperties = () => {\n    const activeKeys = Object.keys(activeFilters);\n\n    const activeValues = Object.values(activeFilters);\n    const typeValues = Object.values(filterTypes);\n\n    const newPropertiesList = properties.filter((property) => {\n      return activeKeys.every((filterName, index) => {\n        const propertyKeys = Object.keys(property);\n        const propertyValues = Object.values(property);\n        if (\n          (typeof activeValues[index] === \"number\" &&\n            activeValues[index] === 0) ||\n          activeValues[index].length === 0\n        ) {\n          return true;\n        }\n        if (\n          typeValues[index] === \"max\" &&\n          propertyValues[propertyKeys.indexOf(filterName)] > activeValues[index]\n        ) {\n          return false;\n        }\n        if (\n          typeValues[index] === \"includes-string\" &&\n          !propertyValues[propertyKeys.indexOf(filterName)].includes(\n            activeValues[index]\n          )\n        ) {\n          return false;\n        }\n        if (\n          typeValues[index] === \"includes\" &&\n          !activeValues[index].includes(\n            propertyValues[propertyKeys.indexOf(filterName)]\n          ) &&\n          !(\n            activeValues[index].includes(5) &&\n            propertyValues[propertyKeys.indexOf(filterName)] >= 5\n          )\n        ) {\n          return false;\n        }\n\n        if (\n          typeValues[index] === \"equal\" &&\n          activeValues[index] !==\n            propertyValues[propertyKeys.indexOf(filterName)]\n        ) {\n          return false;\n        }\n        if (\n          typeValues[index] === \"range\" &&\n          (propertyValues[propertyKeys.indexOf(filterName)] <\n            activeValues[index][0] ||\n            propertyValues[propertyKeys.indexOf(filterName)] >\n              activeValues[index][1]) &&\n          activeValues[index][1] !== 0\n        ) {\n          return false;\n        }\n        return true;\n      });\n    });\n    setFilteredProperties(newPropertiesList);\n  };\n\n  const handleFilter = (filterSearchData: FilterSearchData) => {\n    setActiveFilters(filterSearchData);\n  };\n\n  const closeWindow = () => {\n    setIsChoosingFilters(false);\n    handleFilteredProperties();\n  };\n\n  useEffect(() => {\n    handleFilteredProperties();\n  }, [activeFilters]);\n\n  const [renderAtt, setRenderAtt] = useState(1);\n  return (\n    <>\n      {isChoosingFilters && (\n        <FilterModal handleFilter={handleFilter} closeWindow={closeWindow} />\n      )}\n      <button onClick={() => handleFilteredProperties()}>Teste</button>\n      <button onClick={() => setIsChoosingFilters(true)}>Abrir Filtros</button>\n      <DashboardStyled>\n        {renderAtt &&\n          properties &&\n          filteredProperties.map((item) => (\n            <PropertyCard\n              properties={item}\n              type=\"DashBoard\"\n              setRenderAtt={setRenderAtt}\n              renderAtt={renderAtt}\n            />\n          ))}\n      </DashboardStyled>\n    </>\n  );\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}